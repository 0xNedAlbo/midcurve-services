/**
 * Service layer input types for token CRUD operations
 * These types are used for database operations and are not shared with UI/API
 */

import type { Token, TokenConfigMap } from '@midcurve/shared';

/**
 * Input type for creating a new token
 * Omits id, createdAt, updatedAt (generated by database)
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type CreateTokenInput<T extends keyof TokenConfigMap> = Omit<
    Token<T>,
    "id" | "createdAt" | "updatedAt"
>;

/**
 * Input type for updating an existing token
 * Partial updates, cannot change id, tokenType, or timestamps
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type UpdateTokenInput<T extends keyof TokenConfigMap> = Partial<
    Omit<Token<T>, "id" | "tokenType" | "createdAt" | "updatedAt">
>;

/**
 * Input type aliases for creating tokens
 */
export type CreateErc20TokenInput = CreateTokenInput<"erc20">;
export type CreateAnyTokenInput = CreateTokenInput<keyof TokenConfigMap>;

/**
 * Input type aliases for updating tokens
 */
export type UpdateErc20TokenInput = UpdateTokenInput<"erc20">;
export type UpdateAnyTokenInput = UpdateTokenInput<keyof TokenConfigMap>;

/**
 * Input for discovering an ERC-20 token
 * Requires address and chainId to locate the token on-chain
 */
export interface Erc20TokenDiscoverInput {
    address: string; // Token contract address (any case, will be normalized)
    chainId: number; // Chain ID where token exists
}

/**
 * Mapped type for token discovery inputs
 * Maps each token type to its discovery input type
 */
export interface TokenDiscoverInputMap {
    erc20: Erc20TokenDiscoverInput;
    // Future: solana: SolanaTokenDiscoverInput, etc.
}

/**
 * Generic discovery input type
 * Uses mapped type to ensure type safety
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type TokenDiscoverInput<T extends keyof TokenConfigMap> =
    TokenDiscoverInputMap[T];

/**
 * Union type for any token discovery input
 * Extend this as new token types are added
 */
export type AnyTokenDiscoverInput = TokenDiscoverInput<keyof TokenConfigMap>;

// =============================================================================
// SEARCH TYPES
// =============================================================================

/**
 * Input for searching ERC-20 tokens in CoinGecko
 */
export interface Erc20TokenSearchInput {
    /** EVM chain ID where tokens should exist */
    chainId: number;
    /** Optional partial symbol match (case-insensitive) */
    symbol?: string;
    /** Optional partial name match (case-insensitive) */
    name?: string;
    /** Optional contract address to search for (case-insensitive, will be normalized) */
    address?: string;
}

/**
 * Search result candidate for ERC-20 tokens from CoinGecko
 * Not a full Token object - missing id, decimals, timestamps (not in database yet)
 */
export interface Erc20TokenSearchCandidate {
    /** CoinGecko coin ID */
    coingeckoId: string;
    /** Token symbol (uppercase) */
    symbol: string;
    /** Token name */
    name: string;
    /** Contract address on the specified chain */
    address: string;
    /** EVM chain ID where this token exists */
    chainId: number;
    /** Token logo URL from CoinGecko (if available) */
    logoUrl?: string;
    /** Market cap in USD (used for sorting results by popularity) */
    marketCap?: number;
}

/**
 * Mapped type for token search inputs
 * Maps each token type to its search input type
 */
export interface TokenSearchInputMap {
    erc20: Erc20TokenSearchInput;
    // Future: solana: SolanaTokenSearchInput, etc.
}

/**
 * Mapped type for token search candidates
 * Maps each token type to its search candidate type
 */
export interface TokenSearchCandidateMap {
    erc20: Erc20TokenSearchCandidate;
    // Future: solana: SolanaTokenSearchCandidate, etc.
}

/**
 * Generic search input type
 * Uses mapped type to ensure type safety
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type TokenSearchInput<T extends keyof TokenConfigMap> = TokenSearchInputMap[T];

/**
 * Generic search candidate type
 * Uses mapped type to ensure type safety
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type TokenSearchCandidate<T extends keyof TokenConfigMap> = TokenSearchCandidateMap[T];

/**
 * Union type for any token search input
 */
export type AnyTokenSearchInput = TokenSearchInput<keyof TokenConfigMap>;

/**
 * Union type for any token search candidate
 */
export type AnyTokenSearchCandidate = TokenSearchCandidate<keyof TokenConfigMap>;
