/**
 * Service layer input types for token CRUD operations
 * These types are used for database operations and are not shared with UI/API
 */

import type { Token, TokenConfigMap } from "../../../shared/types/token.js";

/**
 * Input type for creating a new token
 * Omits id, createdAt, updatedAt (generated by database)
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type CreateTokenInput<T extends keyof TokenConfigMap> = Omit<
    Token<T>,
    "id" | "createdAt" | "updatedAt"
>;

/**
 * Input type for updating an existing token
 * Partial updates, cannot change id, tokenType, or timestamps
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type UpdateTokenInput<T extends keyof TokenConfigMap> = Partial<
    Omit<Token<T>, "id" | "tokenType" | "createdAt" | "updatedAt">
>;

/**
 * Input type aliases for creating tokens
 */
export type CreateErc20TokenInput = CreateTokenInput<"erc20">;
export type CreateAnyTokenInput = CreateTokenInput<keyof TokenConfigMap>;

/**
 * Input type aliases for updating tokens
 */
export type UpdateErc20TokenInput = UpdateTokenInput<"erc20">;
export type UpdateAnyTokenInput = UpdateTokenInput<keyof TokenConfigMap>;

/**
 * Input for discovering an ERC-20 token
 * Requires address and chainId to locate the token on-chain
 */
export interface Erc20TokenDiscoverInput {
    address: string; // Token contract address (any case, will be normalized)
    chainId: number; // Chain ID where token exists
}

/**
 * Mapped type for token discovery inputs
 * Maps each token type to its discovery input type
 */
export interface TokenDiscoverInputMap {
    erc20: Erc20TokenDiscoverInput;
    // Future: solana: SolanaTokenDiscoverInput, etc.
}

/**
 * Generic discovery input type
 * Uses mapped type to ensure type safety
 *
 * @template T - Token type key from TokenConfigMap ('erc20', etc.)
 */
export type TokenDiscoverInput<T extends keyof TokenConfigMap> =
    TokenDiscoverInputMap[T];

/**
 * Union type for any token discovery input
 * Extend this as new token types are added
 */
export type AnyTokenDiscoverInput = TokenDiscoverInput<keyof TokenConfigMap>;
