/**
 * Service layer input types for position ledger event operations
 * These types are used for database operations and are not shared with UI/API
 */

import type {
  PositionLedgerEvent,
  PositionLedgerEventConfigMap,
} from '@midcurve/shared';

/**
 * Input type for creating a new position ledger event
 * Omits id, createdAt, updatedAt (generated by database)
 *
 * @template P - Protocol key from PositionLedgerEventConfigMap ('uniswapv3', etc.)
 */
export type CreatePositionLedgerEventInput<
  P extends keyof PositionLedgerEventConfigMap,
> = Omit<PositionLedgerEvent<P>, 'id' | 'createdAt' | 'updatedAt'>;

/**
 * Input type aliases for creating position ledger events
 */
export type CreateUniswapV3LedgerEventInput =
  CreatePositionLedgerEventInput<'uniswapv3'>;
export type CreateAnyLedgerEventInput =
  CreatePositionLedgerEventInput<keyof PositionLedgerEventConfigMap>;

// ============================================================================
// DISCOVERY INPUT TYPES
// ============================================================================

/**
 * Input for discovering a Uniswap V3 position ledger event
 *
 * This represents the raw event data parsed from Etherscan logs.
 * The service will use this data to build a complete PositionLedgerEvent
 * with calculated financial data (PnL, cost basis, etc.).
 *
 * Note: All numeric values use bigint for precision (no loss of data).
 * The service will serialize these to strings for database storage.
 */
export interface UniswapV3LedgerEventDiscoverInput {
  /**
   * Event type from blockchain
   * Maps directly to the three event types emitted by Uniswap V3 NFPM contract
   */
  eventType: 'INCREASE_LIQUIDITY' | 'DECREASE_LIQUIDITY' | 'COLLECT';

  /**
   * Block number where event occurred
   * Used for ordering and hash generation
   */
  blockNumber: bigint;

  /**
   * Transaction index within the block
   * Used for ordering and hash generation
   */
  transactionIndex: number;

  /**
   * Log index within the transaction
   * Used for ordering and hash generation
   */
  logIndex: number;

  /**
   * Transaction hash
   * For reference and verification
   */
  transactionHash: string;

  /**
   * Timestamp when event occurred on blockchain
   * Converted from block timestamp
   */
  timestamp: Date;

  /**
   * NFT token ID (Uniswap V3 position ID)
   * Identifies which position this event belongs to
   */
  tokenId: bigint;

  /**
   * Change in liquidity (deltaL)
   * Present for INCREASE_LIQUIDITY and DECREASE_LIQUIDITY events
   * Undefined for COLLECT events
   *
   * - Positive for INCREASE_LIQUIDITY
   * - Positive for DECREASE_LIQUIDITY (represents amount removed)
   */
  liquidity?: bigint;

  /**
   * Amount of token0 involved in the event
   * Meaning varies by event type:
   * - INCREASE_LIQUIDITY: Amount deposited
   * - DECREASE_LIQUIDITY: Amount withdrawn (added to uncollected principal)
   * - COLLECT: Amount collected (may include fees + principal)
   */
  amount0: bigint;

  /**
   * Amount of token1 involved in the event
   * See amount0 for meaning by event type
   */
  amount1: bigint;

  /**
   * Recipient address (COLLECT events only)
   * The address that received the collected tokens
   * Undefined for INCREASE/DECREASE events
   */
  recipient?: string;
}

/**
 * Mapped type for position ledger event discovery inputs
 * Maps each protocol to its discovery input type
 *
 * This pattern ensures type safety:
 * - PositionLedgerService<'uniswapv3'>.discoverEvent() receives UniswapV3LedgerEventDiscoverInput
 * - Invalid combinations are prevented at compile time
 */
export interface PositionLedgerEventDiscoverInputMap {
  uniswapv3: UniswapV3LedgerEventDiscoverInput;
  // Future: orca: OrcaLedgerEventDiscoverInput, etc.
}

/**
 * Generic discovery input type
 * Uses mapped type to ensure type safety
 *
 * @template P - Protocol key from PositionLedgerEventConfigMap ('uniswapv3', etc.)
 *
 * @example
 * ```typescript
 * // In PositionLedgerService<'uniswapv3'>
 * abstract discoverEvent(
 *   positionId: string,
 *   input: PositionLedgerEventDiscoverInput<'uniswapv3'>
 * ): Promise<PositionLedgerEvent<'uniswapv3'>[]>
 * ```
 */
export type PositionLedgerEventDiscoverInput<
  P extends keyof PositionLedgerEventConfigMap,
> = PositionLedgerEventDiscoverInputMap[P];

/**
 * Type aliases for discovery inputs
 */
export type UniswapV3EventDiscoverInput =
  PositionLedgerEventDiscoverInput<'uniswapv3'>;
export type AnyLedgerEventDiscoverInput =
  PositionLedgerEventDiscoverInput<keyof PositionLedgerEventConfigMap>;
