# Midcurve Services - Environment Configuration

# =============================================================================
# EVM Chain RPC URLs (REQUIRED)
# =============================================================================
# IMPORTANT: These environment variables are REQUIRED for the application to work.
# The application will throw an error at runtime if you attempt to use a chain
# without its corresponding RPC URL configured.
#
# Configure RPC endpoints for each supported EVM chain you plan to use.
# These are used by Erc20TokenService.discoverToken() and all chain operations.
#
# Recommended providers: Alchemy, Infura, QuickNode, or run your own node.

# Ethereum Mainnet (Chain ID: 1) - REQUIRED
RPC_URL_ETHEREUM=https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY

# Arbitrum One (Chain ID: 42161) - REQUIRED
RPC_URL_ARBITRUM=https://arb-mainnet.g.alchemy.com/v2/YOUR_API_KEY

# Base (Chain ID: 8453) - REQUIRED
RPC_URL_BASE=https://base-mainnet.g.alchemy.com/v2/YOUR_API_KEY

# BNB Smart Chain (Chain ID: 56) - REQUIRED
RPC_URL_BSC=https://bsc-dataseed1.binance.org

# Polygon (Chain ID: 137) - REQUIRED
RPC_URL_POLYGON=https://polygon-mainnet.g.alchemy.com/v2/YOUR_API_KEY

# Optimism (Chain ID: 10) - REQUIRED
RPC_URL_OPTIMISM=https://opt-mainnet.g.alchemy.com/v2/YOUR_API_KEY

# =============================================================================
# Database Configuration
# =============================================================================
# PostgreSQL connection string for Prisma
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA

# Development database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/midcurve?schema=public

# Test database (used by integration tests)
# Start with: npm run db:test:up
# This uses Docker Compose to run a separate PostgreSQL instance on port 5433
TEST_DATABASE_URL=postgresql://testuser:testpass@localhost:5433/midcurve_test?schema=public

# =============================================================================
# Application Configuration
# =============================================================================
# Node environment (development, production, test)
NODE_ENV=development

# =============================================================================
# Logging Configuration
# =============================================================================
# Log level for application logging (debug, info, warn, error, silent)
#
# Default behavior (when LOG_LEVEL is not set):
# - development: debug (verbose logging for debugging)
# - production: info (standard logging)
# - test: silent (no logs during tests)
#
# Override the default by setting LOG_LEVEL explicitly:
# LOG_LEVEL=debug
# LOG_LEVEL=info
# LOG_LEVEL=warn
# LOG_LEVEL=error
# LOG_LEVEL=silent
#
# Examples:
# - Debug mode in production: LOG_LEVEL=debug NODE_ENV=production
# - Silent mode in development: LOG_LEVEL=silent NODE_ENV=development
LOG_LEVEL=debug
